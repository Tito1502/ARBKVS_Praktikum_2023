
Praktrikum3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000017c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800100  00800100  000001f0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001f0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000220  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  00000260  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000007da  00000000  00000000  000002a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006f1  00000000  00000000  00000a82  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002d0  00000000  00000000  00001173  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000a0  00000000  00000000  00001444  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003a6  00000000  00000000  000014e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000092  00000000  00000000  0000188a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  0000191c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 48 00 	jmp	0x90	; 0x90 <__vector_11>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a4 30       	cpi	r26, 0x04	; 4
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 a6 00 	call	0x14c	; 0x14c <main>
  88:	0c 94 bc 00 	jmp	0x178	; 0x178 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <__vector_11>:
}

// Warte, bis der Millisekundenzähler den Wert ms erreicht hat
void waitUntil(uint32_t ms) {
	while (systemC() < ms);
}
  90:	1f 92       	push	r1
  92:	0f 92       	push	r0
  94:	0f b6       	in	r0, 0x3f	; 63
  96:	0f 92       	push	r0
  98:	11 24       	eor	r1, r1
  9a:	8f 93       	push	r24
  9c:	9f 93       	push	r25
  9e:	af 93       	push	r26
  a0:	bf 93       	push	r27
  a2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  a6:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
  aa:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <_edata+0x2>
  ae:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <_edata+0x3>
  b2:	01 96       	adiw	r24, 0x01	; 1
  b4:	a1 1d       	adc	r26, r1
  b6:	b1 1d       	adc	r27, r1
  b8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
  bc:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
  c0:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <_edata+0x2>
  c4:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <_edata+0x3>
  c8:	bf 91       	pop	r27
  ca:	af 91       	pop	r26
  cc:	9f 91       	pop	r25
  ce:	8f 91       	pop	r24
  d0:	0f 90       	pop	r0
  d2:	0f be       	out	0x3f, r0	; 63
  d4:	0f 90       	pop	r0
  d6:	1f 90       	pop	r1
  d8:	18 95       	reti

000000da <timer1_init>:
  da:	e0 e8       	ldi	r30, 0x80	; 128
  dc:	f0 e0       	ldi	r31, 0x00	; 0
  de:	80 81       	ld	r24, Z
  e0:	80 64       	ori	r24, 0x40	; 64
  e2:	80 83       	st	Z, r24
  e4:	e1 e8       	ldi	r30, 0x81	; 129
  e6:	f0 e0       	ldi	r31, 0x00	; 0
  e8:	80 81       	ld	r24, Z
  ea:	88 60       	ori	r24, 0x08	; 8
  ec:	80 83       	st	Z, r24
  ee:	8f e0       	ldi	r24, 0x0F	; 15
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
  f6:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
  fa:	af e6       	ldi	r26, 0x6F	; 111
  fc:	b0 e0       	ldi	r27, 0x00	; 0
  fe:	8c 91       	ld	r24, X
 100:	82 60       	ori	r24, 0x02	; 2
 102:	8c 93       	st	X, r24
 104:	80 81       	ld	r24, Z
 106:	85 60       	ori	r24, 0x05	; 5
 108:	80 83       	st	Z, r24
 10a:	08 95       	ret

0000010c <waitFor>:
 10c:	0f 93       	push	r16
 10e:	1f 93       	push	r17
 110:	8b 01       	movw	r16, r22
 112:	9c 01       	movw	r18, r24
 114:	40 91 00 01 	lds	r20, 0x0100	; 0x800100 <_edata>
 118:	50 91 01 01 	lds	r21, 0x0101	; 0x800101 <_edata+0x1>
 11c:	60 91 02 01 	lds	r22, 0x0102	; 0x800102 <_edata+0x2>
 120:	70 91 03 01 	lds	r23, 0x0103	; 0x800103 <_edata+0x3>
 124:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 128:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 12c:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <_edata+0x2>
 130:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <_edata+0x3>
 134:	84 1b       	sub	r24, r20
 136:	95 0b       	sbc	r25, r21
 138:	a6 0b       	sbc	r26, r22
 13a:	b7 0b       	sbc	r27, r23
 13c:	80 17       	cp	r24, r16
 13e:	91 07       	cpc	r25, r17
 140:	a2 07       	cpc	r26, r18
 142:	b3 07       	cpc	r27, r19
 144:	78 f3       	brcs	.-34     	; 0x124 <waitFor+0x18>
 146:	1f 91       	pop	r17
 148:	0f 91       	pop	r16
 14a:	08 95       	ret

0000014c <main>:

// Timer1 Vergleichsinterrupt-Handler


int main(void) {
	cli();
 14c:	f8 94       	cli
	// Initialisiere den Millisekundenzähler
	timer1_init();
 14e:	0e 94 6d 00 	call	0xda	; 0xda <timer1_init>

	// Konfiguriere LED-Pin als Ausgang
	DDRD |= (1 << PIND0) | (1 << PIND1);
 152:	8a b1       	in	r24, 0x0a	; 10
 154:	83 60       	ori	r24, 0x03	; 3
 156:	8a b9       	out	0x0a, r24	; 10
	
	sei();
 158:	78 94       	sei
	
	while (1) {
		// LED einschalten
		PORTD |= (1 << PIND0);
 15a:	58 9a       	sbi	0x0b, 0	; 11
		waitFor(500); // Warte für 500 ms
 15c:	64 ef       	ldi	r22, 0xF4	; 244
 15e:	71 e0       	ldi	r23, 0x01	; 1
 160:	80 e0       	ldi	r24, 0x00	; 0
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	0e 94 86 00 	call	0x10c	; 0x10c <waitFor>

		// LED ausschalten
		PORTD &= ~(1 << PIND0);
 168:	58 98       	cbi	0x0b, 0	; 11
		waitFor(500); // Warte für 500 ms
 16a:	64 ef       	ldi	r22, 0xF4	; 244
 16c:	71 e0       	ldi	r23, 0x01	; 1
 16e:	80 e0       	ldi	r24, 0x00	; 0
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	0e 94 86 00 	call	0x10c	; 0x10c <waitFor>
 176:	f1 cf       	rjmp	.-30     	; 0x15a <main+0xe>

00000178 <_exit>:
 178:	f8 94       	cli

0000017a <__stop_program>:
 17a:	ff cf       	rjmp	.-2      	; 0x17a <__stop_program>
