
Praktikum4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  000001e6  0000027a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001e6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  0080010a  0080010a  00000284  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000284  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002b4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000088  00000000  00000000  000002f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a1d  00000000  00000000  0000037c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000877  00000000  00000000  00000d99  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000052d  00000000  00000000  00001610  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000110  00000000  00000000  00001b40  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000043a  00000000  00000000  00001c50  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001a5  00000000  00000000  0000208a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  0000222f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__vector_4>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 ee       	ldi	r30, 0xE6	; 230
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 30       	cpi	r26, 0x0A	; 10
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	aa e0       	ldi	r26, 0x0A	; 10
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ab 30       	cpi	r26, 0x0B	; 11
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <main>
  9e:	0c 94 f1 00 	jmp	0x1e2	; 0x1e2 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <keys_init>:
#include <util/delay.h>
#include "keys.h"
#include "sevenseg.h"

void keys_init() {
	PORTC |= (1 << PINC5) | (1 << PINC4);
  a6:	88 b1       	in	r24, 0x08	; 8
  a8:	80 63       	ori	r24, 0x30	; 48
  aa:	88 b9       	out	0x08, r24	; 8
	
	// Konfiguration der Pin Change Interrupts für PC4 und PC5
	PCICR |= (1 << PCIE1);  // Aktiviere Pin Change Interrupts für Gruppe 1 (PCINT8 bis PCINT14)
  ac:	e8 e6       	ldi	r30, 0x68	; 104
  ae:	f0 e0       	ldi	r31, 0x00	; 0
  b0:	80 81       	ld	r24, Z
  b2:	82 60       	ori	r24, 0x02	; 2
  b4:	80 83       	st	Z, r24
	PCMSK1 |= (1 << PCINT12) | (1 << PCINT13);  // Aktiviere PCINT12 (PC4) und PCINT13 (PC5)
  b6:	ec e6       	ldi	r30, 0x6C	; 108
  b8:	f0 e0       	ldi	r31, 0x00	; 0
  ba:	80 81       	ld	r24, Z
  bc:	80 63       	ori	r24, 0x30	; 48
  be:	80 83       	st	Z, r24
  c0:	08 95       	ret

000000c2 <__vector_4>:
}

ISR(PCINT1_vect) {
  c2:	1f 92       	push	r1
  c4:	0f 92       	push	r0
  c6:	0f b6       	in	r0, 0x3f	; 63
  c8:	0f 92       	push	r0
  ca:	11 24       	eor	r1, r1
  cc:	2f 93       	push	r18
  ce:	3f 93       	push	r19
  d0:	4f 93       	push	r20
  d2:	5f 93       	push	r21
  d4:	6f 93       	push	r22
  d6:	7f 93       	push	r23
  d8:	8f 93       	push	r24
  da:	9f 93       	push	r25
  dc:	af 93       	push	r26
  de:	bf 93       	push	r27
  e0:	ef 93       	push	r30
  e2:	ff 93       	push	r31

	if (!(PINC & (1 << PINC5))) {
  e4:	35 9b       	sbis	0x06, 5	; 6
		count_up();
  e6:	0e 94 c7 00 	call	0x18e	; 0x18e <count_up>
	}
	
	
	
	if (!(PINC & (1 << PINC4))) {
  ea:	34 9b       	sbis	0x06, 4	; 6
		count_down();
  ec:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <count_down>
	}

  f0:	ff 91       	pop	r31
  f2:	ef 91       	pop	r30
  f4:	bf 91       	pop	r27
  f6:	af 91       	pop	r26
  f8:	9f 91       	pop	r25
  fa:	8f 91       	pop	r24
  fc:	7f 91       	pop	r23
  fe:	6f 91       	pop	r22
 100:	5f 91       	pop	r21
 102:	4f 91       	pop	r20
 104:	3f 91       	pop	r19
 106:	2f 91       	pop	r18
 108:	0f 90       	pop	r0
 10a:	0f be       	out	0x3f, r0	; 63
 10c:	0f 90       	pop	r0
 10e:	1f 90       	pop	r1
 110:	18 95       	reti

00000112 <sevenseg_init>:

volatile uint8_t counter = 0;

void sevenseg_init() {
	// Konfiguration der Segmente als Ausgänge
	DDRD |= (1 << PIND0) | (1 << PIND1) | (1 << PIND2) | (1 << PIND3) | (1 << PIND4) | (1 << PIND5) | (1 << PIND6);
 112:	8a b1       	in	r24, 0x0a	; 10
 114:	8f 67       	ori	r24, 0x7F	; 127
 116:	8a b9       	out	0x0a, r24	; 10

	// Konfiguration der Zehnerstelle als Ausgang
	DDRB |= (1 << PINB0);
 118:	20 9a       	sbi	0x04, 0	; 4
 11a:	08 95       	ret

0000011c <display_digit>:

void display_digit(int digit, int is_tens) {
	
	
	// Anzeige der Ziffer auf der Sieben-Segment-Anzeige
	if (is_tens) 
 11c:	67 2b       	or	r22, r23
 11e:	11 f0       	breq	.+4      	; 0x124 <display_digit+0x8>
	{
		//PORTB = 0x00;
		PORTB &= ~TEN_DIGIT; // Zehnerstelle aktivieren (active-Low)
 120:	28 98       	cbi	0x05, 0	; 5
 122:	01 c0       	rjmp	.+2      	; 0x126 <display_digit+0xa>
	} else {
		PORTB |= TEN_DIGIT; // Einerstelle aktivieren (active-Low)
 124:	28 9a       	sbi	0x05, 0	; 5
	}

	PORTD = ~digits[digit]; // Segmente entsprechend der Ziffer aktivieren (active-Low)
 126:	fc 01       	movw	r30, r24
 128:	e0 50       	subi	r30, 0x00	; 0
 12a:	ff 4f       	sbci	r31, 0xFF	; 255
 12c:	80 81       	ld	r24, Z
 12e:	80 95       	com	r24
 130:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 132:	8f e3       	ldi	r24, 0x3F	; 63
 134:	9f e1       	ldi	r25, 0x1F	; 31
 136:	01 97       	sbiw	r24, 0x01	; 1
 138:	f1 f7       	brne	.-4      	; 0x136 <display_digit+0x1a>
 13a:	00 c0       	rjmp	.+0      	; 0x13c <display_digit+0x20>
 13c:	00 00       	nop
 13e:	08 95       	ret

00000140 <update_display>:

	// Konfiguration der Zehnerstelle als Ausgang
	DDRB |= (1 << PINB0);
}

void update_display() {
 140:	cf 93       	push	r28
 142:	df 93       	push	r29
	// Ziffern auf der Sieben-Segment-Anzeige darstellen
	int tens = counter / 10;
 144:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
	int ones = counter % 10;
 148:	d0 91 0a 01 	lds	r29, 0x010A	; 0x80010a <__data_end>

	display_digit(tens, 0);
 14c:	cd ec       	ldi	r28, 0xCD	; 205
 14e:	8c 9f       	mul	r24, r28
 150:	81 2d       	mov	r24, r1
 152:	11 24       	eor	r1, r1
 154:	86 95       	lsr	r24
 156:	86 95       	lsr	r24
 158:	86 95       	lsr	r24
 15a:	60 e0       	ldi	r22, 0x00	; 0
 15c:	70 e0       	ldi	r23, 0x00	; 0
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	0e 94 8e 00 	call	0x11c	; 0x11c <display_digit>
	display_digit(ones, 1);
 164:	dc 9f       	mul	r29, r28
 166:	c1 2d       	mov	r28, r1
 168:	11 24       	eor	r1, r1
 16a:	c6 95       	lsr	r28
 16c:	c6 95       	lsr	r28
 16e:	c6 95       	lsr	r28
 170:	cc 0f       	add	r28, r28
 172:	8c 2f       	mov	r24, r28
 174:	88 0f       	add	r24, r24
 176:	88 0f       	add	r24, r24
 178:	c8 0f       	add	r28, r24
 17a:	8d 2f       	mov	r24, r29
 17c:	8c 1b       	sub	r24, r28
 17e:	61 e0       	ldi	r22, 0x01	; 1
 180:	70 e0       	ldi	r23, 0x00	; 0
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	0e 94 8e 00 	call	0x11c	; 0x11c <display_digit>
}
 188:	df 91       	pop	r29
 18a:	cf 91       	pop	r28
 18c:	08 95       	ret

0000018e <count_up>:
	_delay_ms(2);             
}

void count_up() {
	// Inkrementiere den Zähler
	counter++;
 18e:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
 192:	8f 5f       	subi	r24, 0xFF	; 255
 194:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>

	// Überlauf überprüfen
	if (counter > 99) {
 198:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
 19c:	84 36       	cpi	r24, 0x64	; 100
 19e:	10 f0       	brcs	.+4      	; 0x1a4 <count_up+0x16>
		counter = 0;
 1a0:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <__data_end>
 1a4:	08 95       	ret

000001a6 <count_down>:
	}
}

void count_down() {
	// Dekrementiere den Zähler
	counter--;
 1a6:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
 1aa:	81 50       	subi	r24, 0x01	; 1
 1ac:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>

	// Überlauf überprüfen
	if (counter > 99) {
 1b0:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
 1b4:	84 36       	cpi	r24, 0x64	; 100
 1b6:	18 f0       	brcs	.+6      	; 0x1be <count_down+0x18>
		counter = 99;
 1b8:	83 e6       	ldi	r24, 0x63	; 99
 1ba:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
 1be:	08 95       	ret

000001c0 <main>:
#include "dateien/sevenseg.h"


int main(void)
{
	keys_init();
 1c0:	0e 94 53 00 	call	0xa6	; 0xa6 <keys_init>
	sevenseg_init();
 1c4:	0e 94 89 00 	call	0x112	; 0x112 <sevenseg_init>
	
	sei();
 1c8:	78 94       	sei
	
    /* Replace with your application code */
    while (1) 
    {
		
		update_display();
 1ca:	0e 94 a0 00 	call	0x140	; 0x140 <update_display>
 1ce:	2f ef       	ldi	r18, 0xFF	; 255
 1d0:	80 ee       	ldi	r24, 0xE0	; 224
 1d2:	90 e0       	ldi	r25, 0x00	; 0
 1d4:	21 50       	subi	r18, 0x01	; 1
 1d6:	80 40       	sbci	r24, 0x00	; 0
 1d8:	90 40       	sbci	r25, 0x00	; 0
 1da:	e1 f7       	brne	.-8      	; 0x1d4 <main+0x14>
 1dc:	00 c0       	rjmp	.+0      	; 0x1de <main+0x1e>
 1de:	00 00       	nop
 1e0:	f4 cf       	rjmp	.-24     	; 0x1ca <main+0xa>

000001e2 <_exit>:
 1e2:	f8 94       	cli

000001e4 <__stop_program>:
 1e4:	ff cf       	rjmp	.-2      	; 0x1e4 <__stop_program>
