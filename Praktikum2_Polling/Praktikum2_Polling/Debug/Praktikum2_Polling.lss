
Praktikum2_Polling.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000022c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001b8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  0000022c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000022c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000025c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  0000029c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000825  00000000  00000000  000002d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006dd  00000000  00000000  00000af9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000384  00000000  00000000  000011d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000054  00000000  00000000  0000155c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003d4  00000000  00000000  000015b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000d8  00000000  00000000  00001984  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  00001a5c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a1 30       	cpi	r26, 0x01	; 1
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <main>
  88:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <pollSwitches>:
volatile uint8_t state = 0;

// Funktion zum Abfragen der Schalterzustände
void pollSwitches() {
	// Schalter SW1 (PINC4)
	if (!(PINC & (1 << PINC4))) {
  90:	34 99       	sbic	0x06, 4	; 6
  92:	25 c0       	rjmp	.+74     	; 0xde <pollSwitches+0x4e>
		if (state == 0 || state == 5 || state == 2) 
  94:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  98:	88 23       	and	r24, r24
  9a:	41 f0       	breq	.+16     	; 0xac <pollSwitches+0x1c>
  9c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  a0:	85 30       	cpi	r24, 0x05	; 5
  a2:	21 f0       	breq	.+8      	; 0xac <pollSwitches+0x1c>
  a4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  a8:	82 30       	cpi	r24, 0x02	; 2
  aa:	21 f4       	brne	.+8      	; 0xb4 <pollSwitches+0x24>
		{
			state = 4;
  ac:	84 e0       	ldi	r24, 0x04	; 4
  ae:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
  b2:	0c c0       	rjmp	.+24     	; 0xcc <pollSwitches+0x3c>
		} else if (state == 4 || state == 3) 
  b4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  b8:	84 30       	cpi	r24, 0x04	; 4
  ba:	21 f0       	breq	.+8      	; 0xc4 <pollSwitches+0x34>
  bc:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  c0:	83 30       	cpi	r24, 0x03	; 3
  c2:	21 f4       	brne	.+8      	; 0xcc <pollSwitches+0x3c>
		{
			PORTD &= ~(1 << PIND0);  // Ausschalten von LED D0
  c4:	58 98       	cbi	0x0b, 0	; 11
			state = 5;
  c6:	85 e0       	ldi	r24, 0x05	; 5
  c8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  cc:	2f ef       	ldi	r18, 0xFF	; 255
  ce:	87 e8       	ldi	r24, 0x87	; 135
  d0:	93 e1       	ldi	r25, 0x13	; 19
  d2:	21 50       	subi	r18, 0x01	; 1
  d4:	80 40       	sbci	r24, 0x00	; 0
  d6:	90 40       	sbci	r25, 0x00	; 0
  d8:	e1 f7       	brne	.-8      	; 0xd2 <pollSwitches+0x42>
  da:	00 c0       	rjmp	.+0      	; 0xdc <pollSwitches+0x4c>
  dc:	00 00       	nop
	}
		

	// Schalter SW2 (PINC5)

	if (!(PINC & (1 << PINC5))) {
  de:	35 99       	sbic	0x06, 5	; 6
  e0:	25 c0       	rjmp	.+74     	; 0x12c <pollSwitches+0x9c>
		if (state == 0 || state == 3 || state == 4) 
  e2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  e6:	88 23       	and	r24, r24
  e8:	41 f0       	breq	.+16     	; 0xfa <pollSwitches+0x6a>
  ea:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  ee:	83 30       	cpi	r24, 0x03	; 3
  f0:	21 f0       	breq	.+8      	; 0xfa <pollSwitches+0x6a>
  f2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  f6:	84 30       	cpi	r24, 0x04	; 4
  f8:	21 f4       	brne	.+8      	; 0x102 <pollSwitches+0x72>
		{
			state = 2;
  fa:	82 e0       	ldi	r24, 0x02	; 2
  fc:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 100:	0c c0       	rjmp	.+24     	; 0x11a <pollSwitches+0x8a>
		} else if (state == 2 || state == 5) 
 102:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 106:	82 30       	cpi	r24, 0x02	; 2
 108:	21 f0       	breq	.+8      	; 0x112 <pollSwitches+0x82>
 10a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 10e:	85 30       	cpi	r24, 0x05	; 5
 110:	21 f4       	brne	.+8      	; 0x11a <pollSwitches+0x8a>
		{
			PORTD &= ~(1 << PIND1);  // Ausschalten von LED D9
 112:	59 98       	cbi	0x0b, 1	; 11
			state = 3;
 114:	83 e0       	ldi	r24, 0x03	; 3
 116:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 11a:	2f ef       	ldi	r18, 0xFF	; 255
 11c:	87 e8       	ldi	r24, 0x87	; 135
 11e:	93 e1       	ldi	r25, 0x13	; 19
 120:	21 50       	subi	r18, 0x01	; 1
 122:	80 40       	sbci	r24, 0x00	; 0
 124:	90 40       	sbci	r25, 0x00	; 0
 126:	e1 f7       	brne	.-8      	; 0x120 <pollSwitches+0x90>
 128:	00 c0       	rjmp	.+0      	; 0x12a <pollSwitches+0x9a>
 12a:	00 00       	nop
 12c:	08 95       	ret

0000012e <performStateAction>:
	}

}

void performStateAction() {
	switch (state) {
 12e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 132:	83 30       	cpi	r24, 0x03	; 3
 134:	91 f0       	breq	.+36     	; 0x15a <performStateAction+0x2c>
 136:	28 f4       	brcc	.+10     	; 0x142 <performStateAction+0x14>
 138:	88 23       	and	r24, r24
 13a:	41 f0       	breq	.+16     	; 0x14c <performStateAction+0x1e>
 13c:	82 30       	cpi	r24, 0x02	; 2
 13e:	51 f0       	breq	.+20     	; 0x154 <performStateAction+0x26>
 140:	08 95       	ret
 142:	84 30       	cpi	r24, 0x04	; 4
 144:	c1 f0       	breq	.+48     	; 0x176 <performStateAction+0x48>
 146:	85 30       	cpi	r24, 0x05	; 5
 148:	c9 f0       	breq	.+50     	; 0x17c <performStateAction+0x4e>
 14a:	08 95       	ret
		case 0:
		PORTD &= ~((1 << PIND0) | (1 << PIND1));  // Beide LEDs aus
 14c:	8b b1       	in	r24, 0x0b	; 11
 14e:	8c 7f       	andi	r24, 0xFC	; 252
 150:	8b b9       	out	0x0b, r24	; 11
		break;
 152:	08 95       	ret
		case 2:
		PORTD |= (1 << PIND0);  // LED D0 eingeschaltet
 154:	58 9a       	sbi	0x0b, 0	; 11
		PORTD &= ~(1 << PIND1);
 156:	59 98       	cbi	0x0b, 1	; 11
		break;
 158:	08 95       	ret
		case 3:
		PORTD ^= (1 << PIND0);  // LED D0 blinkt
 15a:	9b b1       	in	r25, 0x0b	; 11
 15c:	81 e0       	ldi	r24, 0x01	; 1
 15e:	89 27       	eor	r24, r25
 160:	8b b9       	out	0x0b, r24	; 11
 162:	2f ef       	ldi	r18, 0xFF	; 255
 164:	83 ec       	ldi	r24, 0xC3	; 195
 166:	99 e0       	ldi	r25, 0x09	; 9
 168:	21 50       	subi	r18, 0x01	; 1
 16a:	80 40       	sbci	r24, 0x00	; 0
 16c:	90 40       	sbci	r25, 0x00	; 0
 16e:	e1 f7       	brne	.-8      	; 0x168 <performStateAction+0x3a>
 170:	00 c0       	rjmp	.+0      	; 0x172 <performStateAction+0x44>
 172:	00 00       	nop
 174:	08 95       	ret
		_delay_ms(200);  // Blinkzeit 500 ms
		break;
		case 4:
		PORTD |= (1 << PIND1);  // LED D9 eingeschaltet
 176:	59 9a       	sbi	0x0b, 1	; 11
		PORTD &= ~(1 << PIND0);
 178:	58 98       	cbi	0x0b, 0	; 11
		break;
 17a:	08 95       	ret
		case 5:
		PORTD ^= (1 << PIND1);  // LED D9 blinkt
 17c:	9b b1       	in	r25, 0x0b	; 11
 17e:	82 e0       	ldi	r24, 0x02	; 2
 180:	89 27       	eor	r24, r25
 182:	8b b9       	out	0x0b, r24	; 11
 184:	2f ef       	ldi	r18, 0xFF	; 255
 186:	83 ec       	ldi	r24, 0xC3	; 195
 188:	99 e0       	ldi	r25, 0x09	; 9
 18a:	21 50       	subi	r18, 0x01	; 1
 18c:	80 40       	sbci	r24, 0x00	; 0
 18e:	90 40       	sbci	r25, 0x00	; 0
 190:	e1 f7       	brne	.-8      	; 0x18a <performStateAction+0x5c>
 192:	00 c0       	rjmp	.+0      	; 0x194 <performStateAction+0x66>
 194:	00 00       	nop
 196:	08 95       	ret

00000198 <init>:
	}
}

void init() {
	// Konfiguration der Ports
	DDRD |= (1 << PIND0) | (1 << PIND1);
 198:	8a b1       	in	r24, 0x0a	; 10
 19a:	83 60       	ori	r24, 0x03	; 3
 19c:	8a b9       	out	0x0a, r24	; 10
	PORTC |= (1 << PINC5) | (1 << PINC4);
 19e:	88 b1       	in	r24, 0x08	; 8
 1a0:	80 63       	ori	r24, 0x30	; 48
 1a2:	88 b9       	out	0x08, r24	; 8
 1a4:	08 95       	ret

000001a6 <main>:
}

int main(void) {
	init();
 1a6:	0e 94 cc 00 	call	0x198	; 0x198 <init>

	while (1) {
		pollSwitches();  // Abfrage der Schalterzustände
 1aa:	0e 94 48 00 	call	0x90	; 0x90 <pollSwitches>
		
		performStateAction();
 1ae:	0e 94 97 00 	call	0x12e	; 0x12e <performStateAction>
 1b2:	fb cf       	rjmp	.-10     	; 0x1aa <main+0x4>

000001b4 <_exit>:
 1b4:	f8 94       	cli

000001b6 <__stop_program>:
 1b6:	ff cf       	rjmp	.-2      	; 0x1b6 <__stop_program>
